Object:-->
It is used to store various keyed collections and more complex entities. Objects can be created using the Object() 
constructor or the object initializer / literal syntax.

Object coercion
Many built-in operations that expect objects first coerce their arguments to objects. The operation can be summarized as follows:
Objects are returned as-is.
undefined and null throw a TypeError.
Number, String, Boolean, Symbol, BigInt primitives are wrapped into their corresponding object wrappers.
The best way to achieve the same effect in JavaScript is through the Object() constructor. Object(x) converts x to an object, and for undefined or null, it returns a plain object instead of throwing a TypeError.

Places that use object coercion include:

The object parameter of for...in loops.
The this value of Array methods.
Parameters of Object methods such as Object.keys().
Auto-boxing when a property is accessed on a primitive value, since primitives do not have properties.
The this value when calling a non-strict function. Primitives are boxed while null and undefined are replaced with the global object.

Object() --> Turns the input into an object.

Object.assign()--> Copies the values of all enumerable own properties from one or more source objects to a target object.

Object.create() --> Creates a new object with the specified prototype object and properties.

Object.defineProperty() --> Adds the named property described by a given descriptor to an object.

Object.defineProperties() --> Adds the named properties described by the given descriptors to an object.

Object.entries() --> Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.

Object.freeze() --> Freezes an object. Other code cannot delete or change its properties.

Object.fromEntries() --> Returns a new object from an iterable of [key, value] pairs. (This is the reverse of Object.entries).

Object.getOwnPropertyDescriptor() --> Returns a property descriptor for a named property on an object.

Object.getOwnPropertyDescriptors() --> Returns an object containing all own property descriptors for an object.

Object.getOwnPropertyNames() --> Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.

Object.getOwnPropertySymbols() --> Returns an array of all symbol properties found directly upon a given object.

Object.getPrototypeOf() --> Returns the prototype (internal [[Prototype]] property) of the specified object.

Object.is() --> Compares if two values are the same value. Equates all NaN values (which differs from both IsLooselyEqual used by == and IsStrictlyEqual used by ===).

Object.isExtensible() --> Determines if extending of an object is allowed.

Object.isFrozen() --> Determines if an object was frozen.

Object.isSealed() --> Determines if an object is sealed.

Object.keys() --> Returns an array containing the names of all of the given object's own enumerable string properties.

Object.preventExtensions() --> Prevents any extensions of an object.

Object.seal() --> Prevents other code from deleting properties of an object.

Object.setPrototypeOf() --> Sets the object's prototype (its internal [[Prototype]] property).

Object.values() --> Returns an array containing the values that correspond to all of a given object's own enumerable string properties.

Object.prototype.toLocaleString() --> Calls toString().

Object.prototype.toString() --> Returns a string representation of the object.

Object.prototype.valueOf() --> Returns the primitive value of the specified object.