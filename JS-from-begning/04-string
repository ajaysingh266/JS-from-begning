String
The String object is used to represent and manipulate a sequence of characters.
Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings 
are to check their length, to build and concatenate them using the + and += string operators, checking for the
existence or location of substrings with the indexOf() method, or extracting substrings with the substring() method.
eg: -->
const string = new String("A String object");

There are two ways to access an individual character in a string. 
The first is the charAt() method: eg: --> "cat".charAt(1); // gives value "a"
The other way is to treat the string as an array-like object, where individual characters correspond to a
numerical index: eg: --> "cat"[1]; // gives value "a"

// String length
// String slice()
// String substring()
// String substr()
// String replace()
// String replaceAll()
// String toUpperCase()
// String toLowerCase()
// String concat()
// String trim()
// String trimStart()
// String trimEnd()
// String padStart()
// String padEnd()
// String charAt()
// String charCodeAt()
// String split()

// Extracting String Parts
// There are 3 methods for extracting a part of a string:

// slice(start, end)
// substring(start, end)
// substr(start, length)

// The replace() method does not change the string it is called on.
// The replace() method returns a new string.
// The replace() method replaces only the first match
// If you want to replace all matches, use a regular expression with the /g flag set. See examples below.

// Converting a String to an Array
// If you want to work with a string as an array, you can convert it to an array.
// JavaScript String split()
// A string can be converted to an array with the split() method:

// JavaScript Search Methods
// String indexOf()
// String lastIndexOf()
// String search()
// String match()
// String matchAll()
// String includes()
// String startsWith()
// String endsWith()


Static methods
String.fromCharCode() --> Returns a string created by using the specified sequence of Unicode values.

String.fromCodePoint() --> Returns a string created by using the specified sequence of code points.

String.raw() --> Returns a string created from a raw template string.

String.prototype.at() --> Returns the character (exactly one UTF-16 code unit) at the specified index. 
                            Accepts negative integers, which count back from the last string character.

String.prototype.charAt() --> Returns the character (exactly one UTF-16 code unit) at the specified index.

String.prototype.charCodeAt() --> Returns a number that is the UTF-16 code unit value at the given index.

String.prototype.codePointAt() --> Returns a nonnegative integer Number that is the code point value of the UTF-16 
                                    encoded code point starting at the specified pos.

String.prototype.concat() --> Combines the text of two (or more) strings and returns a new string.

String.prototype.includes() --> Determines whether the calling string contains searchString.

String.prototype.endsWith() --> Determines whether a string ends with the characters of the string searchString.

String.prototype.indexOf() --> Returns the index within the calling String object of the first occurrence of searchValue,
                                 or -1 if not found.

String.prototype.lastIndexOf() --> Returns the index within the calling String object of the last occurrence of 
                                    searchValue, or -1 if not found.

String.prototype.localeCompare() --> Returns a number indicating whether the reference string compareString comes before,
                                     after, or is equivalent to the given string in sort order.

String.prototype.match() --> Used to match regular expression regexp against a string.

String.prototype.matchAll() --> Returns an iterator of all regexp's matches.

String.prototype.normalize() --> Returns the Unicode Normalization Form of the calling string value.

String.prototype.padEnd() --> Pads the current string from the end with a given string and returns a new string of the 
                            length targetLength.

String.prototype.padStart() --> Pads the current string from the start with a given string and returns a new string of 
                                the length targetLength.

String.prototype.repeat() --> Returns a string consisting of the elements of the object repeated count times.

String.prototype.replace() --> Used to replace occurrences of searchFor using replaceWith. searchFor may be a string or
                                 Regular Expression, and replaceWith may be a string or function.

String.prototype.replaceAll() --> Used to replace all occurrences of searchFor using replaceWith. searchFor may be a 
                                    string or Regular Expression, and replaceWith may be a string or function.

String.prototype.search() --> Search for a match between a regular expression regexp and the calling string.

String.prototype.slice() --> Extracts a section of a string and returns a new string.

String.prototype.split()  --> Returns an array of strings populated by splitting the calling string at occurrences of the
                             substring sep.

String.prototype.startsWith() --> Determines whether the calling string begins with the characters of string searchString.

String.prototype.substring() --> Returns a new string containing characters of the calling string from (or between) the 
                                specified index (or indices).

String.prototype.toLocaleLowerCase() --> The characters within a string are converted to lowercase while respecting the 
                                        current locale.
                                        For most languages, this will return the same as toLowerCase().

String.prototype.toLocaleUpperCase( [locale, ...locales]) --> The characters within a string are converted to uppercase 
                                                    while respecting the current locale.
                                                For most languages, this will return the same as toUpperCase().

String.prototype.toLowerCase() --> Returns the calling string value converted to lowercase.

String.prototype.toString() --> Returns a string representing the specified object. Overrides the 
                                Object.prototype.toString() method.

String.prototype.toUpperCase() --> Returns the calling string value converted to uppercase.

String.prototype.trim() --> Trims whitespace from the beginning and end of the string.

String.prototype.trimStart() --> Trims whitespace from the beginning of the string.

String.prototype.trimEnd() --> Trims whitespace from the end of the string.

String.prototype.valueOf() --> Returns the primitive value of the specified object. Overrides the 
                                Object.prototype.valueOf() method.

String.prototype[@@iterator]() --> Returns a new iterator object that iterates over the code points of a String value, 
                                    returning each code point as a String value.